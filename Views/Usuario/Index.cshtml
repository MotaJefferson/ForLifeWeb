@model IEnumerable<ForLifeWeb.Models.Usuario>

@{
    ViewData["Title"] = "Index";
}

<body class="fundo">
    <main>
        <div class="container-sm px-4 px-lg-5">
            <h1 class="mt-5 mb-3 text-left ">
                <span class="titulo_inicio">Lista</span> <span class="titulo_meio">de </span><span
                    class=" titulo_fim">usuários</span>
            </h1>

            <!-- Formulário de Pesquisa -->
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Pesquisar usuário" id="inp-pesquisa-usuario"
                    aria-label="Pesquisar usuario">
                <button class="btn btn-success" type="button" id="btn-pesquisa-usuario" data-action-url="@Url.Action("Index", "Usuario")">
                    <i class="bi bi-search"></i>
                </button>
            </div>

            <!-- Botões principais com tooltips -->
            <div class="row justify-content-center align-items-center text-center verdeclaro_backgroundcontainer mx-1">

                <!-- Botão editar cadastro-->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1"
                        data-bs-toggle="tooltip" title="Incluir/Editar Usuário" id="incluir">
                        <i class="bi bi-pencil-fill px-4"></i>
                    </a>
                </div>

                <!-- Botão Descartar -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                       title="Descartar Usuário" id="anc-descartar-usuario">
                        <i class="bi bi-trash3-fill px-4"></i>
                    </a>
                </div>

                <!-- Botão Atualizar lista -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                       title="Atualizar Lista de Usuário" id="anc-atualizar-usuario">
                        <i class="bi bi-arrow-repeat px-4"></i>
                    </a>
                </div>

                <!-- Botão Relatório -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                        title="Visualizar Relatório" id="anc-relatorio-usuario">
                        <i class="bi bi-clipboard2-check-fill px-4"></i>
                    </a>
                </div>
            </div>

            <!-- Tabela de usuarios -->
            <div class="table-responsive mx-1">
                <table class="table table-hover table-bordered text-center" id="tabela-usuario">
                    <thead class="table-success">
                        <tr>
                            <th scope="col">
                                <input type="checkbox" id="select-all" title="Selecionar todos">
                            </th>
                            <th scope="col">ID</th>
                            <th scope="col">Nome</th>
                            <th scope="col">CPF</th>
                            <th scope="col">Usuario</th>
                            <th scope="col">Cargo</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <!-- Coluna do checkbox -->
                                <td>
                                    <input type="checkbox" class="select-usuario" value="@item.id_usuario">
                                </td>
                                <!-- Demais colunas -->                                
                                <td>
                                    @Html.DisplayFor(modelItem => item.id_usuario)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.nome)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.cpf)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.cod_usuario)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.cargo)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </main>   

</body>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous">
    </script>

    <script>
        // Inicializar tooltips
        document.addEventListener("DOMContentLoaded", () => {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Checkbox "Selecionar todos"
            const selectAllCheckbox = document.getElementById('select-all');
            selectAllCheckbox.addEventListener('change', () => {
                const checkboxes = document.querySelectorAll('.select-usuario');
                checkboxes.forEach(checkbox => checkbox.checked = selectAllCheckbox.checked);
            });

            // Atualizar estado do "Selecionar todos" baseado nos checkboxes individuais
            const rowCheckboxes = document.querySelectorAll('.select-usuario');
            rowCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    if (!checkbox.checked) {
                        selectAllCheckbox.checked = false;
                    } else if (Array.from(rowCheckboxes).every(cb => cb.checked)) {
                        selectAllCheckbox.checked = true;
                    }
                });
            });

            // Clique na linha seleciona/desmarca o checkbox
            const rows = document.querySelectorAll('#tabela-usuario tbody tr');
            rows.forEach(row => {
                row.addEventListener('click', (event) => {
                    const checkbox = row.querySelector('.select-usuario');
                    // Evita conflito caso o clique seja diretamente no checkbox
                    if (event.target.tagName !== 'INPUT') {
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change')); // Atualiza o "Selecionar todos" dinamicamente
                    }
                });
            });
        });
    </script>

    <script>
    // Pesquisa dinâmica
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('inp-pesquisa-usuario');
        const searchButton = document.getElementById('btn-pesquisa-usuario');
        const tableBody = document.querySelector('#tabela-usuario tbody');

        const updateTable = (htmlContent) => {
            tableBody.innerHTML = htmlContent;
        };

        const search = () => {
            const searchTerm = searchInput?.value.trim();
            const url = searchButton?.dataset.actionUrl;

            if (!url || !searchTerm) return;

            fetch(`${url}?searchTerm=${encodeURIComponent(searchTerm)}`, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                    }
                    return response.text();
                })
                .then(html => {
                    updateTable(html);
                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('Não foi possível buscar os dados.');
                });
        };

        if (searchButton) {
            searchButton.addEventListener('click', search);
        }

        if (searchInput) {
            searchInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    search();
                }
            });
        }
    });
    </script>

    <script>
    //Recarregar a pagina
    document.addEventListener('DOMContentLoaded', () => {
        const btnAtualizarEstoque = document.getElementById('anc-atualizar-usuario');

        if (btnAtualizarEstoque) {
            btnAtualizarEstoque.addEventListener('click', () => {
                // Recarregar a página para voltar ao estado inicial
                location.reload();
            });
        }
    });
    </script>

    <script>
    //Botão incluir/editar

    document.addEventListener('DOMContentLoaded', () => {
        // Captura o clique no botão de cadastrar novo produto
        const btnCadastrarProduto = document.getElementById('incluir');
    const selectCheckboxes = document.querySelectorAll('.select-usuario');

        if (btnCadastrarProduto) {
            btnCadastrarProduto.addEventListener('click', () => {
                const selectedIds = [];
                selectCheckboxes.forEach((checkbox) => {
                    if (checkbox.checked) {
                        selectedIds.push(parseInt(checkbox.value));
                    }
                });

                // Envia os IDs selecionados para o controlador
                if (selectedIds.length === 0) {
                    window.location.href = '@Url.Action("Create", "Usuario")';
                } else if (selectedIds.length === 1) {
                    window.location.href = `@Url.Action("Edit", "Usuario", new { id = "__id__" })`.replace("__id__", selectedIds[0]);
                } else {
                    alert("Você não pode selecionar mais de um produto para editar.");
                }
            });
        }
    });

    @if (TempData["ErrorMessage"] != null)
    {
            <div class="alert alert-danger">
            @TempData["ErrorMessage"]
            </div>
    }

    </script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.js"></script>

    <script>
            // Função para gerar o PDF com logo, título e tabela formatada
            function gerarPDFSelecionados() {
                const checkboxes = document.querySelectorAll('.select-usuario:checked'); // Apenas checkboxes marcados
                const selectedRows = Array.from(checkboxes).map(cb => cb.closest('tr')); // Obter as linhas correspondentes

                if (selectedRows.length === 0) {
                    alert("Por favor, selecione ao menos uma linha para gerar o relatório.");
                    return;
                }

                // Criar uma estrutura temporária para o conteúdo do PDF
                const tempContainer = document.createElement('div');
                tempContainer.style.padding = '20px'; // Adicionar margem ao conteúdo
                tempContainer.innerHTML = `
                    <div style="display: flex; align-items: center; margin-bottom: 15px;">
                        <img src="/assets/logo_forlife.png" alt="Logo ForLife" style="height: 40px; margin-right: 10px;">
                        <h1 style="font-size: 18px; font-family: Arial, sans-serif; margin: 0;">
                            Relatório de Usuários
                        </h1>
                    </div>
                    <table border="1" style="
                        width: 100%;
                        text-align: center;
                        border-collapse: collapse;
                        font-family: 'Arial', sans-serif;
                        font-size: 12px;
                        margin-top: 15px;
                        border-spacing: 0;">
                        <thead style="background-color: #d4edda; font-weight: bold; border-bottom: 2px solid #000;">
                            <tr>
                                <th style="padding: 6px; border-bottom: 1px solid #000;">ID</th>
                                <th style="padding: 6px; border-bottom: 1px solid #000;">Nome</th>
                                <th style="padding: 6px; border-bottom: 1px solid #000;">CPF</th>
                                <th style="padding: 6px; border-bottom: 1px solid #000;">Usuário</th>
                                <th style="padding: 6px; border-bottom: 1px solid #000;">Cargo</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${selectedRows.map(row => {
                    const cells = row.querySelectorAll('td');
                    return `
                                <tr>
                                    <td style="padding: 6px; border-bottom: 1px solid #ddd;">${cells[1].textContent}</td>
                                    <td style="padding: 6px; border-bottom: 1px solid #ddd;">${cells[2].textContent}</td>
                                    <td style="padding: 6px; border-bottom: 1px solid #ddd;">${cells[3].textContent}</td>
                                    <td style="padding: 6px; border-bottom: 1px solid #ddd;">${cells[4].textContent}</td>
                                    <td style="padding: 6px; border-bottom: 1px solid #ddd;">${cells[5].textContent}</td>
                                </tr>
                            `;
                }).join('')}
                        </tbody>
                    </table>
                `;

                const options = {
                    margin: 10, // Margem do PDF (em mm)
                    filename: 'relatorio_usuarios_selecionados.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'mm', format: 'a4', orientation: 'landscape' }
                };

                // Gerar o PDF com o conteúdo filtrado
                html2pdf().from(tempContainer).set(options).save();
            }

        // Adicionar evento ao botão de relatório
        document.addEventListener('DOMContentLoaded', () => {
            const btnRelatorio = document.getElementById('anc-relatorio-usuario');
            if (btnRelatorio) {
                btnRelatorio.addEventListener('click', gerarPDFSelecionados);
            }
        });
    </script>
