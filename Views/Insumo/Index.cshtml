@using ForLifeWeb.Models
@model IEnumerable<(Insumo Insumo, InsumoEstoque InsumoEstoque)>

@{
    ViewData["Title"] = "Index";
}

<!DOCTYPE html>
<html lang="pt-br">

<body class="fundo">

    <main>
        <div class="container-sm px-4 px-lg-5">
            <h1 class="mt-5 mb-3 text-left ">
                <span class="titulo_inicio">Estoque</span> <span class="titulo_meio">de Insumos</span>
            </h1>

            <!-- Formulário de Pesquisa -->
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Pesquisar Insumos" id="inp-pesquisa-estoqueInsumo"
                       aria-label="Pesquisar Insumos">
                <button class="btn btn-success" type="button" id="btn-pesquisa-estoqueInsumo" data-action-url="@Url.Action("Index", "Insumo")">
                    <i class="bi bi-search"></i>
                </button>
            </div>

            <!-- Botões principais com tooltips -->
            <div class="row justify-content-center align-items-center text-center verdeclaro_backgroundcontainer mx-1">

                <!-- Botão Cadastrar insumo -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1"
                       data-bs-toggle="tooltip" title="Cadastrar novo insumo">
                        <i class="bi bi-plus-lg"></i>
                        <i class="bi bi-pencil-fill px-2"></i>
                    </a>
                </div>

                <!-- Botão Descartar -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                       title="Descartar insumo" id="anc-descartar-estoqueInsumo">
                        <i class="bi bi-trash3-fill px-4"></i>
                    </a>
                </div>

                <!-- Botão Atualizar estoque -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1"
                       data-bs-toggle="tooltip" title="Atualizar estoque" id="anc-atualizar-estoqueInsumo">
                        <i class="bi bi-arrow-repeat px-4"></i>
                    </a>
                </div>

                <!-- Botão Relatório -->
                <div class="col-auto pt-2">
                    <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                       title="Visualizar relatório insumo" id="anc-relatorio-estoqueInsumo">
                        <i class="bi bi-clipboard2-check-fill px-4"></i>
                    </a>
                </div>
            </div>

            <!-- Tabela do insumo -->
            <div class="table-responsive mx-1">
                <table class="table table-hover table-bordered text-center" id="tabela-estoque-insumo">
                    <thead class="table-success">
                        <tr>
                            <th scope="col">
                                <input type="checkbox" id="select-all" title="Selecionar todos">
                            </th>
                            <th scope="col">ID</th>
                            <th scope="col">Insumo</th>
                            <th scope="col">Quantidade</th>
                            <th scope="col">Data de Vencimento</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <!-- Coluna do checkbox -->
                                <td>
                                    <input type="checkbox" class="select-produto" value="@item.Insumo.id_insumo">
                                </td>
                                <!-- Demais colunas -->
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsumoEstoque.id_estoque)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Insumo.nome)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsumoEstoque.quantidade_atual)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </main>


    <script>
        // Seleção de checkboxes
        document.addEventListener('DOMContentLoaded', () => {
            // Checkbox "Selecionar todos"
            const selectAllCheckbox = document.getElementById('select-all');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', () => {
                    const checkboxes = document.querySelectorAll('.select-produto');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = selectAllCheckbox.checked;
                    });
                });
            }

            // Atualizar estado do "Selecionar todos" baseado nos checkboxes individuais
            const rowCheckboxes = document.querySelectorAll('.select-produto');
            rowCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const allChecked = Array.from(rowCheckboxes).every(cb => cb.checked);
                    const noneChecked = Array.from(rowCheckboxes).some(cb => !cb.checked);
                    selectAllCheckbox.checked = allChecked;
                    selectAllCheckbox.indeterminate = !allChecked && !noneChecked;
                });
            });

            // Clique na linha seleciona/desmarca o checkbox
            const rows = document.querySelectorAll('#tabela-estoque-insumo tbody tr');
            rows.forEach(row => {
                row.addEventListener('click', (event) => {
                    const checkbox = row.querySelector('.select-produto');
                    if (event.target.tagName !== 'INPUT' && checkbox) {
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change')); // Atualiza o "Selecionar todos"
                    }
                });
            });
        });
    </script>

    <script>
        // Pesquisa dinâmica
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('inp-pesquisa-estoqueInsumo');
            const searchButton = document.getElementById('btn-pesquisa-estoqueInsumo');
            const tableBody = document.querySelector('#tabela-estoque-insumo tbody');

            const updateTable = (htmlContent) => {
                tableBody.innerHTML = htmlContent;
            };

            const searchInsumos = () => {
                const searchTerm = searchInput?.value.trim();
                const url = searchButton?.dataset.actionUrl;

                if (!url || !searchTerm) return;

                fetch(`${url}?searchTerm=${encodeURIComponent(searchTerm)}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        updateTable(html);
                    })
                    .catch(error => {
                        console.error('Erro:', error);
                        alert('Não foi possível buscar os dados.');
                    });
            };

            if (searchButton) {
                searchButton.addEventListener('click', searchInsumos);
            }

            if (searchInput) {
                searchInput.addEventListener('keypress', (event) => {
                    if (event.key === 'Enter') {
                        searchInsumos();
                    }
                });
            }
        });
    </script>

    <script>
        // Recarregar a página
        document.addEventListener('DOMContentLoaded', () => {
            const btnAtualizarEstoque = document.querySelector('[title="Atualizar estoque"]');

            if (btnAtualizarEstoque) {
                btnAtualizarEstoque.addEventListener('click', () => {
                    location.reload();
                });
            }
        });
    </script>

    <script> // Botão incluir/editar
        document.addEventListener('DOMContentLoaded', () => {
            const btnCadastrarInsumo = document.querySelector('[title="Cadastrar novo insumo"]');
            const selectCheckboxes = document.querySelectorAll('.select-produto');

            if (btnCadastrarInsumo) {
                btnCadastrarInsumo.addEventListener('click', () => {
                    const selectedIds = [];
                    selectCheckboxes.forEach((checkbox) => {
                        if (checkbox.checked) {
                            selectedIds.push(parseInt(checkbox.value));
                        }
                    });

                    // Envia os IDs selecionados para o controlador
                    if (selectedIds.length === 0) {
                        window.location.href = '@Url.Action("Create", "Insumo")';
                    } else if (selectedIds.length === 1) {
                        window.location.href = `@Url.Action("Edit", "Insumo", new { id = "__id__" })`.replace("__id__", selectedIds[0]);
                    } else {
                        alert('Selecione apenas um insumo para edição.');
                    }
                });
            }
        });
    </script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous">
    </script>


    <script>


        // Inicializar tooltips
        document.addEventListener("DOMContentLoaded", () => {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
        });


        function dataVencimentoExpirada(dataVencimento) {
            const dataAtual = new Date();
            const [ano, mes, dia] = dataVencimento.split("-");
            const dataValidade = new Date(ano, mes - 1, dia);
            return dataValidade < dataAtual;
        }

        function carregarDadosEstoque(dados) {
            const tabela = document.querySelector("#tabela-estoque-insumo tbody");
            tabela.innerHTML = "";
            dados.forEach(item => {
                const dataVencimentoFormatada = formatarData(item.dataVencimento);
                const vencido = dataVencimentoExpirada(item.dataVencimento);
                const novaLinha = document.createElement("tr");
                if (vencido) novaLinha.classList.add("vencido");
                novaLinha.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.Insumo}</td>
                    <td>${item.quantidade}</td>
                    <td>${dataVencimentoFormatada}</td>
                `;
                tabela.appendChild(novaLinha);
            });
        }

        function formatarData(data) {
            const [ano, mes, dia] = data.split("-");
            return `${dia}/${mes}/${ano}`;
        }

        carregarDadosEstoque(dadosSimulados);
    </script>
</body>

</html>