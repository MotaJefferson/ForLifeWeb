@using ForLifeWeb.Models
@model IEnumerable<(Plantio Plantio, Produto Produto)>

@{
    ViewData["Title"] = "Plantio";
}

<body class="fundo">  
    <main>
        <div class="container-sm px-4 px-lg-5">
            <h1 class="mt-3 mb-3 text-left">
                <span class="titulo_inicio">Pla</span><span class="titulo_meio">nt</span><span class=" titulo_fim">io</span>
            </h1>

            <form>
                
                @Html.AntiForgeryToken()

                <!--Campo oculto-->

                    @foreach (var item in Model)
                    {
                        <input type="hidden" value="@item.Produto.insumo_id" name="insumo_id" />
                    }


                    <!-- Linha com Código Produto -->
                <div class="row">
                    <div class="col-md-2 col-12">
                        <div class="form-floating mb-4">
                            <input type="number" step="1" min="1" class="form-control" id="codigo_produto"
                                   placeholder="Código Produto" name="produto_id" required>
                            <label for="codigo_insumo_produto">Código Produto</label>
                        </div>
                    </div>

                    <!-- Nome do Produto -->
                    <div class="col-md-8 col-12">
                        <div class="form-floating mb-2">
                            <input type="text" class="form-control" id="nome_produto" placeholder="Nome do Produto"
                                   disabled>
                            <label for="nome_produto">Nome do Produto</label>
                        </div>
                    </div>

                    <div class="col-md-2 col-12">
                        <div class="form-floating mb-4">
                            <input type="number" step="1" min="1" class="form-control" id="quantidade_plantio"
                                   placeholder="Quantidade" name="quantidade_plantio" required>
                            <label for="quantidade">Quantidade</label>
                        </div>
                    </div>

                </div>

                 <!-- Botão Plantar -->
   
                <button type="button" id="btn-plantar" class="btn btn-success mb-4 px-4">
                    Plantar <i class="bi bi-tree-fill"></i>
                </button>

                <!-- Botões principais com tooltips -->
                <div class="row justify-content-center align-items-center text-center verdeclaro_backgroundcontainer mx-1">
                    <h1 class="text-left">
                    </h1>

                    <!--Botão (Anchor) colher e estocar, deve colher o produto selecionado e inserir no estoque-->
                    <div class="col-auto mb-1 pt-2">
                        <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                           title="Colher e estocar" id="anc-estoque-plantacao">
                            <i class="bi bi-box-seam-fill px-3"></i>
                        </a>
                    </div>

                    <!--Botão (Anchor) descartar plantação, deve descartar o produto selecinado da plantação-->
                    <div class="col-auto mb-1 pt-2">
                        <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                           title="Descartar plantação" id="anc-descartar-plantacao">
                            <i class="bi bi-trash3-fill px-3"></i>
                        </a>
                    </div>

                    <!--Botão (anchor) atualizar plantação, deve atualizar a plantação-->
                    <div class="col-auto mb-1 pt-2">
                        <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                           title="Atualizar plantação" id="anc-atualizar-plantacao">
                            <i class="bi bi-arrow-repeat px-3"></i>
                        </a>
                    </div>

                    <!--Botão (Anchor) Relatório de plantação, deve extrair/exibir um relatório da plantação-->
                    <div class="col-auto mb-1 pt-2">
                        <a class="btn btn-success btn-lg text-center rounded-pill mb-1" data-bs-toggle="tooltip"
                           title="Relatório de plantação" id="anc-relatorio-plantacao">
                            <i class="bi bi-clipboard2-check-fill px-3"></i>
                        </a>
                    </div>
                </div>

                <!-- Barra de pesquisa para filtrar dados na tabela -->
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Filtrar plantações" id="inp-pesquisa-plantacao" 
                           aria-label="Filtrar tabela de plantação">
                    <button class="btn btn-success" type="button" id="btn-pesquisa-plantacao" data-action-url="@Url.Action("Index", "Plantio")">
                        <i class="bi bi-search"></i>
                    </button>
                </div>

                <!-- Tabela de plantação -->
                <div class="table-responsive mx-1">
                    <table class="table table-hover table-bordered text-center" id="tabela-plantacao">
                        <thead class="table-success">
                            <tr>
                                <th scope="col">
                                    <input type="checkbox" id="select-all" title="Selecionar todos">
                                </th>
                                <th scope="col">ID</th>
                                <th scope="col">Produto</th>
                                <th scope="col">Quantidade</th>
                                <th scope="col">Data de Plantio</th>
                                <th scope="col">Data de Validade</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model) {
                            <tr>
                                <!-- Coluna do checkbox -->
                                <td>
                                    <input type="checkbox" class="select-plantacao" value="@item.Plantio.id_plantio">
                                </td>
                                    <!-- Demais colunas -->
                                <td>
                                    @Html.DisplayFor(modelItem => item.Plantio.id_plantio)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Produto.nome)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Plantio.quantidade_plantio)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Plantio.data_plantio)
                                </td>                            
                                <td>
                                    @Html.DisplayFor(modelItem => item.Plantio.data_vencimento)
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </form>        
            
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous">
    </script>

    <script>
        // Inicializar tooltips
        document.addEventListener("DOMContentLoaded", () => {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
        });
    </script>

    <script>
        //Validar campos negativos
        document.getElementById('quantidade_plantio').addEventListener('input', (event) => {
            const input = event.target;
            if (input.value < 0) {
                input.value = ''; // Limpa o valor negativo
                alert('Por favor, insira um valor maior ou igual a 0');
            }
        });


    </script>

    <script>
        document.getElementById('codigo_produto').addEventListener('input', async (event) => {
            const codigo = event.target.value.trim(); // Obtém o valor do campo
            const nomeInsumoField = document.getElementById('nome_produto');

            nomeInsumoField.value = "";

            // Não faz a busca se o código estiver vazio
            if (codigo === "") return;

            try {
                // Faz a chamada AJAX ao servidor
                const response = await fetch(`/Produto/ObterNomeProduto?codigoProduto=${codigo}`);

                if (!response.ok) {
                    throw new Error("Erro ao buscar o produto.");
                }

                // Preenche o campo com o nome do insumo retornado
                const nome = await response.text();
                nomeInsumoField.value = nome || "Produto não encontrado";
            } catch (error) {
                console.error(error.message);
                nomeInsumoField.value = "Erro ao buscar o produto";
            }
        });
    </script>

     <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Checkbox "Selecionar todos"
            const selectAllCheckbox = document.getElementById('select-all');
            selectAllCheckbox.addEventListener('change', () => {
                const checkboxes = document.querySelectorAll('.select-plantacao');
                checkboxes.forEach(checkbox => checkbox.checked = selectAllCheckbox.checked);
            });

            // Atualizar estado do "Selecionar todos" baseado nos checkboxes individuais
            const rowCheckboxes = document.querySelectorAll('.select-plantacao');
            rowCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    if (!checkbox.checked) {
                        selectAllCheckbox.checked = false;
                    } else if (Array.from(rowCheckboxes).every(cb => cb.checked)) {
                        selectAllCheckbox.checked = true;
                    }
                });
            });

            // Clique na linha seleciona/desmarca o checkbox
            const rows = document.querySelectorAll('#tabela-plantacao tbody tr');
            rows.forEach(row => {
                row.addEventListener('click', (event) => {
                    const checkbox = row.querySelector('.select-plantacao');
                    // Evita conflito caso o clique seja diretamente no checkbox
                    if (event.target.tagName !== 'INPUT') {
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change')); // Atualiza o "Selecionar todos" dinamicamente
                    }
                });
            });
        });
    </script>

    <script>
        // Pesquisa dinâmica
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('inp-pesquisa-plantacao');
            const searchButton = document.getElementById('btn-pesquisa-plantacao');
            const tableBody = document.querySelector('#tabela-plantacao tbody');

            const updateTable = (htmlContent) => {
                tableBody.innerHTML = htmlContent;
            };

            const search = () => {
                const searchTerm = searchInput?.value.trim();
                const url = searchButton?.dataset.actionUrl;

                if (!url || !searchTerm) return;

                fetch(`${url}?searchTerm=${encodeURIComponent(searchTerm)}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        updateTable(html);
                    })
                    .catch(error => {
                        console.error('Erro:', error);
                        alert('Não foi possível buscar os dados.');
                    });
            };

            if (searchButton) {
                searchButton.addEventListener('click', search);
            }

            if (searchInput) {
                searchInput.addEventListener('keypress', (event) => {
                    if (event.key === 'Enter') {
                        search();
                    }
                });
            }
        });
    </script>

     <script>
        //Recarregar a pagina
        document.addEventListener('DOMContentLoaded', () => {
        const btnAtualizarEstoque = document.getElementById('anc-atualizar-plantacao');

            if (btnAtualizarEstoque) {
                btnAtualizarEstoque.addEventListener('click', () => {
                    // Recarregar a página para voltar ao estado inicial
                    location.reload();
                });
            }
        });
    </script>

    <script>
        //Botão incluir/editar

        document.addEventListener('DOMContentLoaded', () => {
            // Captura o clique no botão de cadastrar novo produto
        const btnCadastrarProduto = document.getElementById('incluir');
            const selectCheckboxes = document.querySelectorAll('.select-plantacao');

            if (btnCadastrarProduto) {
                btnCadastrarProduto.addEventListener('click', () => {
                    const selectedIds = [];
                    selectCheckboxes.forEach((checkbox) => {
                        if (checkbox.checked) {
                            selectedIds.push(parseInt(checkbox.value));
                        }
                    });

                    // Envia os IDs selecionados para o controlador
                    if (selectedIds.length === 0) {
                        window.location.href = '@Url.Action("Create", "Cliente")';
                    } else if (selectedIds.length === 1) {
                    window.location.href = `@Url.Action("Edit", "Cliente", new { id = "__id__" })`.replace("__id__", selectedIds[0]);
                    } else {
                        alert("Você não pode selecionar mais de um produto para editar.");
                    }
                });
            }
        });

        @if (TempData["ErrorMessage"] != null)
        {
                <div class="alert alert-danger">
                @TempData["ErrorMessage"]
                </div>
        }

    </script>

</body>

